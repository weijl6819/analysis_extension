var UpdateManager=(function(){var h=Utils;var r=Consts;var q=false;var n=new Delegate();var g=h.getManifestUrl();var a=true;var e=StorageWrapper;var j=function(s){var t=new XHR({url:s.url+"?rnd="+(new Date()).getTime(),method:"get",async:true,callback:function(u){if(u.call==="success"){s.success(u.response,u.additionalInfo);}else{s.failure(u.response,u.additionalInfo);}}}).send();};var k=function(){LogFile.write("file: updateManager.js, function: _setLastUpdate, ");var s=(new Date()).getTime();e.set("lastUpdate",s);};var f=function(){var s=document.createEvent("Events");s.initEvent(r.RELOAD_BG_EVENT_NAME,true,false);document.dispatchEvent(s);};var d=function(){LogFile.write("file: updateManager.js, function: _updateCompleteHandler");q=false;n.invokeOnce();};var o=function(s,x,v){var A=false;var z=false;var y=false;var t={pluginsJson:null,manifest:x,pluginsCode:{},userCode:{background:null,extension:null}};var u=function(G){var F=ExtensionDataStore.getEnabledPlugins();var C=function(H){return function(I){LogFile.write("file: updateManager.js, function: ~fetch plugin "+H.name);j({url:H.url,success:function(J){t.pluginsCode[H.id]=J;y=true;I();},failure:function(){I({message:"Error fetching plugin "+H.id});}});};};var D=function(K){var J;var I=true;if(v){return true;}for(var H=0;H<F.length;H++){J=F[H];if(J.id===K.id){I=(J.ver<K.ver);break;}}return I;};var E=function(I){var K=ExtensionDataStore.getPluginsOrderdLists();var L,H;if(v){z=y=true;return;}for(var M in r.PluginTypes){if(r.PluginTypes.hasOwnProperty(M)){L=K[r.PluginTypes[M]];H=I[r.PluginTypes[M]];if(L.length!==H.length){y=true;if(r.PluginTypes[M]===r.PluginTypes.BACKGROUND){z=true;return;}continue;}for(var J=0;J<L.length;J++){if(L[J].id!==H[J].id){y=true;if(r.PluginTypes[M]===r.PluginTypes.BACKGROUND){z=true;return;}break;}}}}};var B=function(H){j({url:x.pluginsurl,success:function(I){t.pluginsJson=JSON.parse(I);if(typeof t.pluginsJson.plugins_version!=="undefined"&&parseInt(t.pluginsJson.plugins_version)!==parseInt(x.pluginsver)){H(null);return;}H(h.getEnabledPlugins(t.pluginsJson),h.generatePluginsOrderLists(t.pluginsJson));},failure:function(){H(null);}});};if(v||((typeof s.pluginsver!=="undefined"&&typeof x.pluginsver!=="undefined")&&parseInt(s.pluginsver,10)<parseInt(x.pluginsver,10))){B(function(J,I){var H=[];if(!J){G({message:"error in getting enabled plugins"});return;}E(I);J.forEach(function(L,K){if(D(L)){if(h.isBgPlugin(L)){z=true;}H.push(C(L));}});h.FunctionsRunner.parallel(H,function(K){if(K){G(K);return;}G();});});}else{G();}};var w=function(D){var C=function(E){if(v||((typeof s.ver!=="undefined"&&typeof x.ver!=="undefined")&&parseInt(s.ver,10)<parseInt(x.ver,10))){j({url:x.jslink,success:function(F){t.userCode.extension=F;y=true;E();},failure:function(){E({message:"error in extension code request"});}});}else{E();}};var B=function(E){if(v||((typeof s.backgroundver!=="undefined"&&typeof x.backgroundver!=="undefined")&&parseInt(s.backgroundver,10)<parseInt(x.backgroundver,10))){j({url:x.backgroundjs,success:function(F){t.userCode.background=F;A=true;E();},failure:function(){E({message:"error in background code request"});}});}else{E();}};h.FunctionsRunner.parallel([C,B],function(E){if(E){D(E);return;}D();});};LogFile.write("file: updateManager.js, function: _doUpdate");h.FunctionsRunner.parallel([u,w,h.removeExpiredDBEntries],function(B){if(B){LogFile.write("file: updateManager.js, function: _doUpdate, error i code fetching");d();return;}ExtensionDataStore.setNewExtensionData(t,function(){LogFile.write("file: updateManager.js, function: _doUpdate, new code saved");Reports.update(parseInt(s.ver,10));d();if(v||A||z){f();return;}if(y){ExtensionDataStore.reload();}});});};var m=function(u){LogFile.write("file: updateManager.js, function: _checkIfUpdateNeeded");var t=function(){LogFile.write("file: updateManager.js, function: _checkIfUpdateNeeded, onStoreReady callback");var v=ExtensionDataStore.getManifest();e.get("lastUpdate",function(w){var x;var y=v.updateinterval||r.UPDATE_INTERVAL;y=parseInt(y,10);if(w.lastUpdate&&(w.lastUpdate+(y*60*1000)>(new Date()).getTime())){LogFile.write("file: updateManager.js, interval has not passed yet");u(false,v,v);return;}k();j({url:g,success:function(z){LogFile.write("file: updateManager.js, function: _checkIfUpdateNeeded, xhr success callback");var A=h.parseManifestXML(z);LogFile.write("file: updateManager.js, oldManifest.ver: "+v.ver+", newManifest.ver "+A.ver);u(parseInt(v.ver,10)<parseInt(A.ver,10),v,A);},failure:function(){LogFile.write("file: updateManager.js, function: _checkIfUpdateNeeded, xhr fail callback");u(false,v,v);}});});};var s=function(v){LogFile.write("file: updateManager.js, function: _checkIfUpdateNeeded, onStoreError callback");if(v.message===r.FILE_MISSING){l();}};ExtensionDataStore.onStoreReady(t).onStoreError(s);};var b=function b(){LogFile.write("file: updateManager.js, function: _checkNextUpdate");q=true;if(typeof b.updateTimerId!=="undefined"){clearInterval(b.updateTimerId);delete b.updateTimerId;}m(function(s,u,t){LogFile.write("file: updateManager.js, function: _checkNextUpdate, isUpdateNeeded: "+s);b.updateTimerId=setTimeout(function(){b();},1000*60);if(!s){d();return;}o(u,t);});};var i=function(){if(Consts.IS_EVAL_BLOCKED){return;}LogFile.write("file: updateManager.js, function: forceUpdate");e.set("lastUpdate",0);b();};var l=function(){if(Consts.IS_EVAL_BLOCKED){return;}LogFile.write("file: updateManager.js, function: updateNedded");k();j({url:g,success:function(s){LogFile.write("file: updateManager.js, function: updateNedded, xhr success callback");var t=h.parseManifestXML(s);o(t,t,a);},failure:function(){LogFile.write("file: updateManager.js, function: updateNedded, xhr fail callback");}});};var p=function(s){if(!q){s();return;}n.addObserver(s);};(function c(){if(!Consts.IS_EVAL_BLOCKED){b();}})();return{onUpdateComplete:p,updateNedded:l,forceUpdate:i};}());(function(){try{var f=1000*60;var i=1000*60*60*6;var c="__lastReportedString__";var b="__lastReportedStringVersion__";var g={list:[{filename:"background.html",sign:"C1"},{filename:"Settings.json",sign:"C2"},{filename:"manifest.json",sign:"C3"},{filename:"popup.html",sign:"C4"},{filename:"js/background.js",sign:"C5"},{filename:"js/main.js",sign:"C6"},{filename:"js/platformVersion.js",sign:"C7"},{filename:"js/api/chrome.js",sign:"C8"},{filename:"js/api/cookie.js",sign:"C9"},{filename:"js/api/message.js",sign:"C10"},{filename:"js/api/monitor.js",sign:"C11"},{filename:"js/api/pageAction.js",sign:"C12"},{filename:"js/api/pageActionBG.js",sign:"C13"},{filename:"js/lib/app_api.js",sign:"C14"},{filename:"js/lib/bg_app_api.js",sign:"C15"},{filename:"js/lib/consts.js",sign:"C16"},{filename:"js/lib/cookie_store.js",sign:"C17"},{filename:"js/lib/delegate.js",sign:"C19"},{filename:"js/lib/events.js",sign:"C20"},{filename:"js/lib/extensionDataStore.js",sign:"C21"},{filename:"js/lib/logFile.js",sign:"C22"},{filename:"js/lib/logging.js",sign:"C23"},{filename:"js/lib/onBGDocumentLoad.js",sign:"C24"},{filename:"js/lib/reports.js",sign:"C25"},{filename:"js/lib/storageWrapper.js",sign:"C26"},{filename:"js/lib/updateManager.js",sign:"C27"},{filename:"js/lib/util.js",sign:"C28"},{filename:"js/lib/xhr.js",sign:"C29"},{filename:"js/lib/installer.js",sign:"C30"},{filename:"js/lib/popupResource/newPopup.js",sign:"C31"},{filename:"js/lib/popupResource/popup.js",sign:"C32"}]};var h=function(){var k=(new Date()).getTime();var e=localStorage.__lastValidationTime__;if(!e||(k>=parseInt(e,10)+i)){localStorage.__lastValidationTime__=k;return true;}return false;};var j=function(){var e=function(){var p="";for(var o=0;o<g.list.length;o++){var r=new XMLHttpRequest();var n=(chrome.runtime||chrome.extension).getURL(g.list[o].filename);r.open("GET",g.list[o].filename,false);try{r.send();}catch(q){p+=g.list[o].sign;}}return p;};var l=e();if(l===""){localStorage.removeItem(c);localStorage.removeItem(b);return;}var m=0;if(localStorage.__lastReportedStringVersion__){m=localStorage.__lastReportedStringVersion__;}var k="";if(localStorage.__lastReportedString__){k=localStorage.__lastReportedString__;}if(k!==l){localStorage.__lastReportedString__=l;localStorage.__lastReportedStringVersion__=m+1;Reports.error(new ErrorMessage(new Error("missing_files_found"),"FilesValidator","missingFilesString="+l+"-"+m));}};var a=function(){setTimeout(function(){try{if(h()){j();}a();}catch(k){}},f);};a();}catch(d){}})();
