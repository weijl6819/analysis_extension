"use strict";function TreeTransformer(n,e){TreeWalker.call(this),this.before=n,this.after=e}TreeTransformer.prototype=new TreeWalker,function(){function n(n,e){n.DEFMETHOD("transform",function(n,o){var r,t;return n.push(this),n.before&&(r=n.before(this,e,o)),void 0===r&&(e(r=this,n),n.after&&(void 0!==(t=n.after(r,o))&&(r=t))),n.pop(),r})}function e(n,e){return MAP(n,function(n){return n.transform(e,!0)})}n(AST_Node,noop),n(AST_LabeledStatement,function(n,e){n.label=n.label.transform(e),n.body=n.body.transform(e)}),n(AST_SimpleStatement,function(n,e){n.body=n.body.transform(e)}),n(AST_Block,function(n,o){n.body=e(n.body,o)}),n(AST_DWLoop,function(n,e){n.condition=n.condition.transform(e),n.body=n.body.transform(e)}),n(AST_For,function(n,e){n.init&&(n.init=n.init.transform(e)),n.condition&&(n.condition=n.condition.transform(e)),n.step&&(n.step=n.step.transform(e)),n.body=n.body.transform(e)}),n(AST_ForIn,function(n,e){n.init=n.init.transform(e),n.object=n.object.transform(e),n.body=n.body.transform(e)}),n(AST_With,function(n,e){n.expression=n.expression.transform(e),n.body=n.body.transform(e)}),n(AST_Exit,function(n,e){n.value&&(n.value=n.value.transform(e))}),n(AST_LoopControl,function(n,e){n.label&&(n.label=n.label.transform(e))}),n(AST_If,function(n,e){n.condition=n.condition.transform(e),n.body=n.body.transform(e),n.alternative&&(n.alternative=n.alternative.transform(e))}),n(AST_Switch,function(n,o){n.expression=n.expression.transform(o),n.body=e(n.body,o)}),n(AST_Case,function(n,o){n.expression=n.expression.transform(o),n.body=e(n.body,o)}),n(AST_Try,function(n,o){n.body=e(n.body,o),n.bcatch&&(n.bcatch=n.bcatch.transform(o)),n.bfinally&&(n.bfinally=n.bfinally.transform(o))}),n(AST_Catch,function(n,o){n.argname=n.argname.transform(o),n.body=e(n.body,o)}),n(AST_Definitions,function(n,o){n.definitions=e(n.definitions,o)}),n(AST_VarDef,function(n,e){n.name=n.name.transform(e),n.value&&(n.value=n.value.transform(e))}),n(AST_Destructuring,function(n,o){n.names=e(n.names,o)}),n(AST_Lambda,function(n,o){n.name&&(n.name=n.name.transform(o)),n.argnames=e(n.argnames,o),n.body=n.body instanceof AST_Node?n.body.transform(o):e(n.body,o)}),n(AST_Call,function(n,o){n.expression=n.expression.transform(o),n.args=e(n.args,o)}),n(AST_Sequence,function(n,o){n.expressions=e(n.expressions,o)}),n(AST_Dot,function(n,e){n.expression=n.expression.transform(e)}),n(AST_Sub,function(n,e){n.expression=n.expression.transform(e),n.property=n.property.transform(e)}),n(AST_Yield,function(n,e){n.expression&&(n.expression=n.expression.transform(e))}),n(AST_Await,function(n,e){n.expression=n.expression.transform(e)}),n(AST_Unary,function(n,e){n.expression=n.expression.transform(e)}),n(AST_Binary,function(n,e){n.left=n.left.transform(e),n.right=n.right.transform(e)}),n(AST_Conditional,function(n,e){n.condition=n.condition.transform(e),n.consequent=n.consequent.transform(e),n.alternative=n.alternative.transform(e)}),n(AST_Array,function(n,o){n.elements=e(n.elements,o)}),n(AST_Object,function(n,o){n.properties=e(n.properties,o)}),n(AST_ObjectProperty,function(n,e){n.key instanceof AST_Node&&(n.key=n.key.transform(e)),n.value=n.value.transform(e)}),n(AST_Class,function(n,o){n.name&&(n.name=n.name.transform(o)),n.extends&&(n.extends=n.extends.transform(o)),n.properties=e(n.properties,o)}),n(AST_Expansion,function(n,e){n.expression=n.expression.transform(e)}),n(AST_NameMapping,function(n,e){n.foreign_name=n.foreign_name.transform(e),n.name=n.name.transform(e)}),n(AST_Import,function(n,o){n.imported_name&&(n.imported_name=n.imported_name.transform(o)),n.imported_names&&e(n.imported_names,o),n.module_name=n.module_name.transform(o)}),n(AST_Export,function(n,o){n.exported_definition&&(n.exported_definition=n.exported_definition.transform(o)),n.exported_value&&(n.exported_value=n.exported_value.transform(o)),n.exported_names&&e(n.exported_names,o),n.module_name&&(n.module_name=n.module_name.transform(o))}),n(AST_TemplateString,function(n,o){n.segments=e(n.segments,o)}),n(AST_PrefixedTemplateString,function(n,e){n.template_string=n.template_string.transform(e)})}();